---
import { getCollection } from 'astro:content';
// const allPosts = await getCollection("posts");

// Assuming the structure of your post, adjust as necessary
interface Post {
    slug: string;
    data: {
        title: string;
        timestamp: Date;
        tags: [string];
    };
}

interface GroupedPosts {
    [year: string]: {
        [month: string]: Post[];
    };
}

const allPosts: Post[] = await getCollection("posts");

// Function to group posts by year
function groupPostsByYear(posts: Post[]): GroupedPosts {
    // First, group and sort posts within each month
    const groupedAndSorted = posts.reduce<GroupedPosts>((groupedPosts, post) => {
        const year = new Date(post.data.timestamp).getFullYear().toString();
        const month = new Date(post.data.timestamp).toLocaleString('default', { month: 'long' });

        if (!groupedPosts[year]) {
            groupedPosts[year] = {};
        }

        if (!groupedPosts[year][month]) {
            groupedPosts[year][month] = [];
        }

        groupedPosts[year][month].push(post);

        // Sort the posts within each month
        groupedPosts[year][month].sort((a, b) => b.data.timestamp - a.data.timestamp);

        return groupedPosts;
    }, {});

    // Then, sort the months within each year
    Object.keys(groupedAndSorted).forEach(year => {
        const sortedMonths = Object.keys(groupedAndSorted[year]).sort((a, b) => {
            const monthA = new Date(`${a} 01, ${year}`).getMonth();
            const monthB = new Date(`${b} 01, ${year}`).getMonth();
            return monthB - monthA;
        });

        const sortedGroup = {};
        sortedMonths.forEach(month => {
            sortedGroup[month] = groupedAndSorted[year][month];
        });
        groupedAndSorted[year] = sortedGroup;
    });

    return groupedAndSorted;
}



const postsGroupedByYear = groupPostsByYear(allPosts);

const horizontalPadding = "10px";
---

<div class="yearsList">
    {Object.keys(postsGroupedByYear).sort().reverse().map(year => (
        <section class="year">
            <h2 class="yearTitle horizontalPadding">{year}</h2>
            {Object.keys(postsGroupedByYear[year]).map(month => (
                <div class="month">
                    <h3 class="horizontalPadding">{month}</h3>
                    <ol class="postList">
                        {postsGroupedByYear[year][month].map(post => (
                            <a href={`/posts/${post.slug}`} >
                        <div class="cell">
                            <p class="title">{post.data.title}</p>
                            <div class="line" />
                            
                            <div class="tags">
                                {post.data.tags.map((tag: string) =>
                                    <span class="tag">{tag}</span>
                                )}
                            </div>
                            <span class="date">{post.data.timestamp.toDateString()}</span>
                        </div>
                
                    </a>
                        ))}
                    </ol>
                </div>
            ))}
        </section>
    ))}
</div>


<style define:vars={{ horizontalPadding }}>
    .yearsList {
        display: flex;
        flex-direction: column;
        gap: 5rem;
    }

    .year {
        display: flex;
        flex-direction: column;
        gap: 1.8rem;
    }

    .yearTitle {
        font-size: 1.4rem;
    }

    .month {
        display: flex;
        flex-direction: column;
        gap: 0.2rem
    }

    .month h3 {
        font-size: 1rem;
        font-weight: 300;
        color: var(--tx-3)
    }

    .horizontalPadding {
        padding: 0px var(--horizontalPadding);
    }

    .postList {
        display: flex;
        flex-direction: column;
        gap: 0rem;
    }
    

    .cell { 
        display: flex;
        flex-direction: row;
        align-items: baseline; /* Align items in the center vertically */
        padding: 10px var(--horizontalPadding);
        border-radius: 8px;
        transition: transform 0.1s ease;
        gap: 0.4rem;
    }

    .cell:hover {
        background-color: var(--bg-2)
    }

    .cell:active {
        transform: translateY(1px);
    }

    a {
        text-decoration: none;
    }

    .title {
        flex-grow: 0; /* Do not allow the title to grow */
        flex-basis: auto; /* Set the base size to the content's intrinsic size */
        /* Additional styling as needed */
        color: var(--tx);
    }

    .line {
        flex-grow: 1; /* Allow the line to take up the remaining space */
        background-image: repeating-linear-gradient(
            to right,
            var(--ui), /* Dot color */
            var(--ui) 2px, /* Dot width */
            transparent 1px, /* Gap starts */
            transparent 6px /* Gap width */
        );
        
        height: 2px;
        margin: 0px 8px; /* Optional: add a small margin for visual separation */
    }

    .cell:hover .line {
        background-image: repeating-linear-gradient(
            to right,
            var(--ui-2), /* Dot color */
            var(--ui-2) 2px, /* Dot width */
            transparent 1px, /* Gap starts */
            transparent 6px /* Gap width */
        );
    }

    .tags {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 0.1rem;
    }

    .tag {
        display: inline-block;
        background-color: var(--bg-2);
        font-size: 0.7rem;
        padding: 1px 8px;
        border-radius: 50px;
        color: var(--tx-3)
    }

    .cell:hover .tag {
        background-color: var(--ui);
        color: var(--tx-2)
    }

    .date {
        flex-shrink: 1; /* Allow the date to shrink if necessary */
        color: var(--tx-3);
        font-size: 0.8rem;
    }

</style>