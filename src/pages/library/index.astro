---
import GenreBadge from "../../components/GenreBadge.astro";
import StarRating from "../../components/StarRating.astro";
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";

type BookType = {
    data: {
        title: string,
        dateRead: Date;
        rating: number;
        author: string[];
        allTimeFav: boolean,
        genre: string,

        // ... other book properties
    };
    slug: string;
    // ... other book properties
};

const books: BookType[] = await getCollection("books");

function getYear(date: Date) {
    return date.getFullYear();
}

interface GroupedBooks {
    [key: string]: BookType[];
}


// Grouping books by year
const groupedBooks: GroupedBooks = books.reduce((acc: GroupedBooks, book: BookType) => {
    const year: string = getYear(book.data.dateRead).toString();
    if (!acc[year]) {
        acc[year] = [];
    }
    acc[year].push(book);
    return acc;
}, {});

// Sorting the books within each year group by dateRead in descending order
Object.keys(groupedBooks).forEach(year => {
    groupedBooks[year].sort((a, b) => {
        // Convert dateRead to timestamp for comparison
        const dateA = new Date(a.data.dateRead).getTime();
        const dateB = new Date(b.data.dateRead).getTime();
        return dateB - dateA;
    });
});


// Sorting the years for display
const years: string[] = Object.keys(groupedBooks).sort((a, b) => parseInt(b) - parseInt(a));

---

<Layout title="Library">
    <p class="introduction">I really enjoy reading and consider it my favorite hobby. On average, I find myself delving into about 26 books a year. You can subscribe to my book posts <a href="/library.xml">via RSS</a>.</p>

    <div id="library">
        {years.map((year) => (
            <div class="year">
                <div class="year-and-amount">
                    <h3>{year}</h3>
                    <span class="badge">{groupedBooks[year].length}</span>
                </div>

                <div class="books-of-year">
                    {groupedBooks[year].map((book) => (
                        // <BookCard slug={book.slug} />
                        <a href={`/library/${book.slug}`} class={`book ${book.data.allTimeFav ? "fav" : ""}`}>
                            <div class="title-and-author">
                                <span>{book.data.title}</span>
                                <span class="author">{book.data.author[0]}</span>
                            </div>
                            <div class="genre-rating-wrapper">
                                <GenreBadge genre={book.data.genre} />
                                <StarRating rating={book.data.rating} allTimeFav={book.data.allTimeFav} />
                            </div>
                        </a>
                    ))}
                </div>
            </div>
        ))}
    </div>
</Layout>

<style>

    h3 {
        color: var(--tx-3);
        margin-bottom: 1.2rem; 
    }

    #library {
        display: flex;
        flex-direction: column;
        gap: 3rem;
        
    }

    .introduction {
        margin-top: -1rem;
        margin-bottom: 1rem;
        color: var(--tx-2)
    }

    h3 {
        margin: 0;
    }

    .year-and-amount {
        display: flex;
        /* flex-direction: row; */
        align-items: center;
        margin-bottom: 1rem;
        gap: 0.8rem;
    }

    #title-link-description {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    #title-and-link {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .introduction {
        color: var(--tx-2);
    }

    .introduction a {
        text-decoration: underline;
    }

    .introduction a:hover {
        text-decoration: none;
    }


    #books {
        display: flex;
        flex-direction: column;
        gap: 0rem;
    
    }

    .book {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        padding: 14px 0px;
        border-bottom: 1px solid var(--bg-2);
        text-decoration: none;
        transition: border-left-width 0.2s ease-out, padding-left 0.2s ease-out;;
        padding-left: 0rem;
        border-left: 0px solid transparent;
        padding-right: 1rem;
        padding-left: 0.5rem;
        gap: 0.5rem;
    }

    .fav {
        background: linear-gradient(to right, rgba(255, 238, 0, 0.2), transparent 60%);
        border-left: 2px solid gold;
    }

    .fav:hover {
        border-left: 8px solid gold !important;
    }

    .fav .author {
        color: var(--tx) !important;
        opacity: 0.7;
    }

    

    .book span {
        color: var(--tx)
    }

    .book:hover {
        background-color: var(--bg-2);
        border-left: 8px solid var(--bg-3);
        padding-left: 1rem;
    }


    .genre-rating-wrapper {
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        transition-property: transform;
        transition-duration: 0.2s; /* Adjust duration as needed */
        transition-timing-function: ease-out; /* Or another timing function */
        align-items: flex-start;
    }
    .book:hover .genre-rating-wrapper {
        transform: translateX(0.5rem);
    }

    .book:last-child {
        border-bottom: none;
    }

    .title-and-author {
        display: flex;
        flex-direction: column;
        gap: 0rem;
        align-items: baseline;
        flex-grow: 1;
    }


    .author {
        color: var(--tx-3) !important;
        font-size: 0.8rem;
        opacity: 1;
        transition: opacity 0.2s ease-out;
    }
   
    .cover {
        max-width: 100%;
        height: auto;
    }

    @media screen and (max-width: 480px) {
        .title-and-author {
            flex-direction: column;
            gap: 0.2rem;
        }

        .book {
            flex-direction: column;
        }
    }
</style>